üìå Updated Plan (Keep Flight Search in Home Component)
1Ô∏è‚É£ Features in home.component.ts
Dropdown city search (calls api/city/search/{query})
Validation for required fields
Shows flight search results below the form
Navigates to booking when a flight is selected
üìå 2Ô∏è‚É£ Update home.component.html (UI + Validations)
html
Copy
Edit
<div class="container mt-4">
  <div class="card shadow p-4">
    <h2 class="text-center">Search Flights</h2>

    <form #searchForm="ngForm" (ngSubmit)="searchFlights()">
      <!-- From City -->
      <div class="mb-3 position-relative">
        <label for="fromCity" class="form-label">From</label>
        <input
          type="text"
          id="fromCity"
          class="form-control"
          [(ngModel)]="fromCityQuery"
          name="fromCity"
          required
          #fromCityRef="ngModel"
          (input)="fetchCities('from')"
          autocomplete="off"
        />
        <div *ngIf="fromCityRef.invalid && fromCityRef.touched" class="text-danger">
          From city is required.
        </div>

        <!-- City Suggestions -->
        <ul *ngIf="filteredFromCities.length" class="list-group position-absolute w-100">
          <li
            *ngFor="let city of filteredFromCities"
            class="list-group-item list-group-item-action"
            (click)="selectCity(city, 'from')"
          >
            {{ city.name }} ({{ city.code }})
          </li>
        </ul>
      </div>

      <!-- To City -->
      <div class="mb-3 position-relative">
        <label for="toCity" class="form-label">To</label>
        <input
          type="text"
          id="toCity"
          class="form-control"
          [(ngModel)]="toCityQuery"
          name="toCity"
          required
          #toCityRef="ngModel"
          (input)="fetchCities('to')"
          autocomplete="off"
        />
        <div *ngIf="toCityRef.invalid && toCityRef.touched" class="text-danger">
          To city is required.
        </div>

        <!-- City Suggestions -->
        <ul *ngIf="filteredToCities.length" class="list-group position-absolute w-100">
          <li
            *ngFor="let city of filteredToCities"
            class="list-group-item list-group-item-action"
            (click)="selectCity(city, 'to')"
          >
            {{ city.name }} ({{ city.code }})
          </li>
        </ul>
      </div>

      <!-- Departure Date -->
      <div class="mb-3">
        <label for="departureDate" class="form-label">Departure Date</label>
        <input
          type="date"
          id="departureDate"
          class="form-control"
          [(ngModel)]="departureDate"
          name="departureDate"
          required
          min="{{ minDate }}"
          #departureDateRef="ngModel"
        />
        <div *ngIf="departureDateRef.invalid && departureDateRef.touched" class="text-danger">
          Departure date is required and cannot be in the past.
        </div>
      </div>

      <button type="submit" class="btn btn-primary w-100" [disabled]="searchForm.invalid">Search Flights</button>
    </form>
  </div>

  <!-- Search Results -->
  <div *ngIf="flights.length" class="mt-4">
    <h3 class="text-center">Available Flights</h3>
    <div class="list-group">
      <div *ngFor="let flight of flights" class="list-group-item d-flex justify-content-between align-items-center">
        <div>
          <h5>{{ flight.airline }} ({{ flight.flightNumber }})</h5>
          <p>{{ flight.from }} ‚Üí {{ flight.to }} | Departure: {{ flight.departureTime }}</p>
        </div>
        <button class="btn btn-success" (click)="bookFlight(flight)">Book</button>
      </div>
    </div>
  </div>
</div>
üìå 3Ô∏è‚É£ Update home.component.ts (Search + City API)
typescript
Copy
Edit
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { CityService } from 'src/app/services/city.service';
import { FlightService } from 'src/app/services/flight.service';

@Component({
  selector: 'app-home',
  standalone: true,
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {
  fromCityQuery = '';
  toCityQuery = '';
  departureDate = '';

  filteredFromCities: any[] = [];
  filteredToCities: any[] = [];

  selectedFromCity: any = null;
  selectedToCity: any = null;

  flights: any[] = [];

  minDate: string = '';

  constructor(private cityService: CityService, private flightService: FlightService, private router: Router) {
    // Set the minimum date (today's date)
    const today = new Date();
    this.minDate = today.toISOString().split('T')[0]; // Format YYYY-MM-DD
  }

  fetchCities(type: 'from' | 'to') {
    const query = type === 'from' ? this.fromCityQuery : this.toCityQuery;
    if (query.length < 2) return; // Prevent unnecessary API calls

    this.cityService.searchCities(query).subscribe({
      next: (cities) => {
        if (type === 'from') {
          this.filteredFromCities = cities;
        } else {
          this.filteredToCities = cities;
        }
      },
      error: (error) => console.error('Error fetching cities:', error)
    });
  }

  selectCity(city: any, type: 'from' | 'to') {
    if (type === 'from') {
      this.selectedFromCity = city;
      this.fromCityQuery = `${city.name} (${city.code})`;
      this.filteredFromCities = [];
    } else {
      this.selectedToCity = city;
      this.toCityQuery = `${city.name} (${city.code})`;
      this.filteredToCities = [];
    }
  }

  searchFlights() {
    if (!this.selectedFromCity || !this.selectedToCity || !this.departureDate) {
      alert('Please select valid cities and a date!');
      return;
    }

    this.flightService.getFlights(this.selectedFromCity.code, this.selectedToCity.code, this.departureDate).subscribe({
      next: (flights) => {
        this.flights = flights;
      },
      error: (error) => console.error('Error fetching flights:', error)
    });
  }

  bookFlight(flight: any) {
    this.router.navigate(['/booking'], { queryParams: { flightId: flight.id } });
  }
}
üìå 4Ô∏è‚É£ Update city.service.ts (City API Call)
typescript
Copy
Edit
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class CityService {
  private baseUrl = 'http://localhost:5000/api/city/search'; // Adjust API base URL

  constructor(private http: HttpClient) {}

  searchCities(query: string): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/${query}`);
  }
}
üìå 5Ô∏è‚É£ Update flight.service.ts (Flight Search API)
typescript
Copy
Edit
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class FlightService {
  private baseUrl = 'http://localhost:5000/api/flight'; // Adjust API base URL

  constructor(private http: HttpClient) {}

  getFlights(from: string, to: string, date: string): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/search?from=${from}&to=${to}&date=${date}`);
  }
}
üéØ Next Steps
‚úÖ Now flight search works in home.component.ts with validations.
‚úÖ City search dropdown integrated using api/city/search/{query}.
‚úÖ Fluent validation for cities + departure date.
‚úÖ Booking navigation is ready.

Let me know if you want any modifications! üöÄ

You said:
Flight service will be called when user will hit search flight button how the result will be displayed in search component
ChatGPT said:
You're right! Let's keep the search logic in the HomeComponent, but display the flight results in the SearchComponent instead of HomeComponent.

üìå Updated Plan
Search Flights in HomeComponent:

Take From, To, Date inputs.
Fetch flight results when clicking Search Flights.
Pass the search results to SearchComponent.
Display Flights in SearchComponent:

Fetch the search results from HomeComponent.
Display the results in a structured Bootstrap-styled card layout.
üìå 1Ô∏è‚É£ Update home.component.ts (Search + Emit Event)
typescript
Copy
Edit
import { Component, EventEmitter, Output } from '@angular/core';
import { CityService } from 'src/app/services/city.service';
import { FlightService } from 'src/app/services/flight.service';

@Component({
  selector: 'app-home',
  standalone: true,
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {
  fromCityQuery = '';
  toCityQuery = '';
  departureDate = '';
  flights: any[] = [];

  filteredFromCities: any[] = [];
  filteredToCities: any[] = [];
  selectedFromCity: any = null;
  selectedToCity: any = null;

  minDate: string = '';

  @Output() flightSearchEvent = new EventEmitter<any[]>(); // Emit search results

  constructor(private cityService: CityService, private flightService: FlightService) {
    const today = new Date();
    this.minDate = today.toISOString().split('T')[0];
  }

  fetchCities(type: 'from' | 'to') {
    const query = type === 'from' ? this.fromCityQuery : this.toCityQuery;
    if (query.length < 2) return;

    this.cityService.searchCities(query).subscribe({
      next: (cities) => {
        if (type === 'from') this.filteredFromCities = cities;
        else this.filteredToCities = cities;
      },
      error: (error) => console.error('Error fetching cities:', error)
    });
  }

  selectCity(city: any, type: 'from' | 'to') {
    if (type === 'from') {
      this.selectedFromCity = city;
      this.fromCityQuery = `${city.name} (${city.code})`;
      this.filteredFromCities = [];
    } else {
      this.selectedToCity = city;
      this.toCityQuery = `${city.name} (${city.code})`;
      this.filteredToCities = [];
    }
  }

  searchFlights() {
    if (!this.selectedFromCity || !this.selectedToCity || !this.departureDate) {
      alert('Please select valid cities and a date!');
      return;
    }

    this.flightService.getFlights(this.selectedFromCity.code, this.selectedToCity.code, this.departureDate).subscribe({
      next: (flights) => {
        this.flights = flights;
        this.flightSearchEvent.emit(this.flights); // Emit the result
      },
      error: (error) => console.error('Error fetching flights:', error)
    });
  }
}
üìå 2Ô∏è‚É£ Update search.component.ts (Receive & Display Flights)
typescript
Copy
Edit
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-search',
  standalone: true,
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.css']
})
export class SearchComponent {
  @Input() flights: any[] = []; // Receive search results
}
üìå 3Ô∏è‚É£ Update search.component.html (Display Results)
html
Copy
Edit
<div class="container mt-3">
  <h3 class="text-center">Available Flights</h3>
  <div class="row">
    <div *ngFor="let flight of flights" class="col-md-4">
      <div class="card shadow p-3 mb-3">
        <div class="card-body">
          <h5 class="card-title">{{ flight.airline }} ({{ flight.flightNumber }})</h5>
          <p class="card-text">
            <strong>{{ flight.from }}</strong> ‚Üí <strong>{{ flight.to }}</strong><br />
            Departure: {{ flight.departureTime }}<br />
            Price: ‚Çπ{{ flight.price }}
          </p>
          <button class="btn btn-success w-100">Book Now</button>
        </div>
      </div>
    </div>
  </div>
</div>
üìå 4Ô∏è‚É£ Update app.component.html (Include Both Components)
html
Copy
Edit
<app-home (flightSearchEvent)="searchResults = $event"></app-home>
<app-search [flights]="searchResults"></app-search>
‚úÖ Summary
‚úî User enters cities & date in HomeComponent
‚úî Search button calls API & emits flight results
‚úî SearchComponent receives results & displays them
‚úî Flights are shown in Bootstrap-styled cards

Now, the Home Component handles searching, and the Search Component handles displaying results! üöÄ
Let me know if you need modifications. üòä

You said:
<app-home (flightSearchEvent)="searchResults = $event"></app-home>
<app-search [flights]="searchResults"></app-search>
Do i have to write <router-outlet>?

ChatGPT said:
Yes! If you are navigating between different pages, you should use <router-outlet>, but if you want to display both components on the same page, then using <app-home> and <app-search> directly is fine.

üìå When to Use <router-outlet>?
Use <router-outlet> when you want: ‚úÖ A separate Search Page (e.g., /search-results)
‚úÖ To keep the URL updated (/search-results?from=BOM&to=DEL)
‚úÖ Better navigation experience

üìå When NOT to Use <router-outlet>?
‚ùå If you want both components to be visible on the same page
‚ùå If you don't need page navigation

‚úÖ Option 1: Using <router-outlet> (Recommended for Page Navigation)
Modify app.component.html:

html
Copy
Edit
<router-outlet></router-outlet>
Update app-routes.ts:

typescript
Copy
Edit
import { Routes } from '@angular/router';
import { HomeComponent } from './components/home/home.component';
import { SearchComponent } from './components/search/search.component';

export const appRoutes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'search-results', component: SearchComponent }
];
Modify home.component.ts (Navigate to Search Page):

typescript
Copy
Edit
import { Router } from '@angular/router';

constructor(private router: Router, private flightService: FlightService) {}

searchFlights() {
  if (!this.selectedFromCity || !this.selectedToCity || !this.departureDate) {
    alert('Please select valid cities and a date!');
    return;
  }

  this.flightService.getFlights(this.selectedFromCity.code, this.selectedToCity.code, this.departureDate).subscribe({
    next: (flights) => {
      this.router.navigate(['/search-results'], { state: { flights } });
    },
    error: (error) => console.error('Error fetching flights:', error)
  });
}
Modify search.component.ts (Retrieve Data from Navigation State):

typescript
Copy
Edit
import { ActivatedRoute, Router } from '@angular/router';

constructor(private router: Router) {
  const navigation = this.router.getCurrentNavigation();
  this.flights = navigation?.extras.state?.['flights'] || [];
}
‚úÖ Option 2: Using <app-home> and <app-search> Together (No Routing)
If you don't want to navigate to a different page, just use:

html
Copy
Edit
<app-home (flightSearchEvent)="searchResults = $event"></app-home>
<app-search [flights]="searchResults"></app-search>
‚úî This keeps everything on the same page.

üí° Which One to Choose?
If you want a separate search results page ‚Üí Use <router-outlet>.
If you want to show results on the same page ‚Üí Use <app-home> and <app-search>.
Let me know how you want to proceed! üöÄ

You said:
 want a separate search results page ‚Üí Use <router-outlet>
ChatGPT said:
Great! Since you want a separate search results page, we'll use Angular Routing with <router-outlet>.

‚úÖ Steps to Implement Search Page Navigation
We'll make sure that:
‚úî User searches for flights in HomeComponent
‚úî User is navigated to SearchComponent with flight results
‚úî SearchComponent displays flights

1Ô∏è‚É£ Add <router-outlet> in app.component.html
Replace existing content with:

html
Copy
Edit
<router-outlet></router-outlet>
‚úÖ This will load the current route‚Äôs component dynamically.

2Ô∏è‚É£ Define Routes in app-routes.ts
typescript
Copy
Edit
import { Routes } from '@angular/router';
import { HomeComponent } from './components/home/home.component';
import { SearchComponent } from './components/search/search.component';

export const appRoutes: Routes = [
  { path: '', component: HomeComponent },  // Default page
  { path: 'search-results', component: SearchComponent }
];
‚úÖ Now, we have /search-results route for displaying flight results.

3Ô∏è‚É£ Modify home.component.ts to Navigate with Flight Data
typescript
Copy
Edit
import { Router } from '@angular/router';
import { FlightService } from '../../services/flight.service';

constructor(private router: Router, private flightService: FlightService) {}

searchFlights() {
  if (!this.selectedFromCity || !this.selectedToCity || !this.departureDate) {
    alert('Please select valid cities and a date!');
    return;
  }

  this.flightService.getFlights(this.selectedFromCity.code, this.selectedToCity.code, this.departureDate).subscribe({
    next: (flights) => {
      this.router.navigate(['/search-results'], { state: { flights } });
    },
    error: (error) => console.error('Error fetching flights:', error)
  });
}
‚úÖ When user clicks "Search Flights", it will navigate to /search-results with flight data.

4Ô∏è‚É£ Modify search.component.ts to Get Flight Data
typescript
Copy
Edit
import { Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.css']
})
export class SearchComponent {
  flights: any[] = [];

  constructor(private router: Router) {
    const navigation = this.router.getCurrentNavigation();
    this.flights = navigation?.extras.state?.['flights'] || [];
  }
}
‚úÖ This ensures that flight results are available in the search page.

5Ô∏è‚É£ Modify search.component.html to Display Flights
html
Copy
Edit
<h2>Flight Search Results</h2>

<table class="table table-striped">
  <thead>
    <tr>
      <th>Flight</th>
      <th>Departure</th>
      <th>Arrival</th>
      <th>Fare</th>
      <th>Book</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let flight of flights">
      <td>{{ flight.flightNumber }}</td>
      <td>{{ flight.departureTime }}</td>
      <td>{{ flight.arrivalTime }}</td>
      <td>‚Çπ{{ flight.fare }}</td>
      <td>
        <button class="btn btn-primary">Book Now</button>
      </td>
    </tr>
  </tbody>
</table>
‚úÖ Displays flight details in a Bootstrap table.








generate code for the Ui of Flightbookingapp home component in which searching the city from my api as each time user starts typing the city name 

start newly from HTML /TS and city service changes also the models if requires and other file changes step by step
ChatGPT said:
Let's build the HomeComponent UI step by step for the Flight Booking App, where:

Users can search for a city using your API (api/city/search/{query}) while typing.
The dropdown will show city suggestions dynamically.
Users can select a city by clicking on it.
The search button fetches flight results using your FlightService.
üõ†Ô∏è Step 1: Update City Model (city.model.ts)
Create or modify the City model to ensure it matches the API response.

üìÇ src/app/models/city.model.ts

typescript
Copy
Edit
export interface City {
  id: number;
  name: string;
  airportCode: string;
}
üõ†Ô∏è Step 2: Update City Service (city.service.ts)
Modify the service to fetch city names dynamically.

üìÇ src/app/services/city.service.ts

typescript
Copy
Edit
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { City } from '../models/city.model';

@Injectable({
  providedIn: 'root'
})
export class CityService {
  private apiUrl = 'http://localhost:5000/api/city/search'; // Update as per your API

  constructor(private http: HttpClient) {}

  searchCities(query: string): Observable<City[]> {
    if (!query.trim()) {
      return new Observable<City[]>(); // Return empty observable if query is empty
    }
    return this.http.get<City[]>(`${this.apiUrl}/${query}`);
  }
}
üõ†Ô∏è Step 3: Update Home Component (home.component.ts)
üìÇ src/app/components/home/home.component.ts

typescript
Copy
Edit
import { Component } from '@angular/core';
import { CityService } from '../../services/city.service';
import { City } from '../../models/city.model';
import { debounceTime, distinctUntilChanged, Subject, switchMap } from 'rxjs';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {
  cities: City[] = [];
  fromCity: string = '';
  toCity: string = '';
  searchQuery = new Subject<string>(); // Subject to handle real-time search  

  constructor(private cityService: CityService) {
    // Set up real-time search with debounce to avoid too many API calls  
    this.searchQuery.pipe(
      debounceTime(300), // Wait for 300ms after typing stops  
      distinctUntilChanged(), // Prevent duplicate requests  
      switchMap(query => this.cityService.searchCities(query)) // Call API  
    ).subscribe(cities => {
      this.cities = cities;
    });
  }

  onCityInput(query: string) {
    this.searchQuery.next(query); // Send input to Subject  
  }

  selectCity(type: 'from' | 'to', city: City) {
    if (type === 'from') {
      this.fromCity = city.name;
    } else {
      this.toCity = city.name;
    }
    this.cities = []; // Hide dropdown after selection  
  }
}
üõ†Ô∏è Step 4: Create Home Component UI (home.component.html)
üìÇ src/app/components/home/home.component.html

html
Copy
Edit
<div class="container mt-4">
  <h2 class="text-center">Flight Booking</h2>

  <!-- Search Cities for "From" -->
  <div class="mb-3 position-relative">
    <label for="fromCity">From</label>
    <input
      type="text"
      class="form-control"
      id="fromCity"
      placeholder="Enter departure city"
      [(ngModel)]="fromCity"
      (input)="onCityInput($event.target.value)"
    />
    <ul *ngIf="cities.length > 0" class="list-group position-absolute w-100">
      <li *ngFor="let city of cities" class="list-group-item" (click)="selectCity('from', city)">
        {{ city.name }} ({{ city.airportCode }})
      </li>
    </ul>
  </div>

  <!-- Search Cities for "To" -->
  <div class="mb-3 position-relative">
    <label for="toCity">To</label>
    <input
      type="text"
      class="form-control"
      id="toCity"
      placeholder="Enter destination city"
      [(ngModel)]="toCity"
      (input)="onCityInput($event.target.value)"
    />
    <ul *ngIf="cities.length > 0" class="list-group position-absolute w-100">
      <li *ngFor="let city of cities" class="list-group-item" (click)="selectCity('to', city)">
        {{ city.name }} ({{ city.airportCode }})
      </li>
    </ul>
  </div>

  <button class="btn btn-primary w-100 mt-3">Search Flights</button>
</div>
üõ†Ô∏è Step 5: Add Styling (home.component.css)
üìÇ src/app/components/home/home.component.css

css
Copy
Edit
.list-group {
  max-height: 200px;
  overflow-y: auto;
  position: absolute;
  z-index: 10;
}
üõ†Ô∏è Step 6: Ensure HttpClientModule and FormsModule are Set
Since you're using standalone components, make sure HttpClientModule and FormsModule are included in main.ts.

üìÇ src/main.ts

typescript
Copy
Edit
import { bootstrapApplication } from '@angular/platform-browser';
import { provideHttpClient } from '@angular/common/http';
import { AppComponent } from './app/app.component';
import { provideRouter } from '@angular/router';
import { appRoutes } from './app/app.routes';
import { importProvidersFrom } from '@angular/core';
import { FormsModule } from '@angular/forms';

bootstrapApplication(AppComponent, {
  providers: [
    provideRouter(appRoutes),
    provideHttpClient(),
    importProvidersFrom(FormsModule)
  ]
}).catch(err => console.error(err));
‚úÖ Now, Run Your App
Start your backend (.NET Core)
arduino
Copy
Edit
dotnet run
Start your Angular app
nginx
Copy
Edit
ng serve
Open http://localhost:4200/
Type a city name in the From or To field
It should fetch city names dynamically from your API.
Clicking on a city should fill the input field.
üî• Next Steps
Implement Flight Search API Call in FlightService
Display Flight Search Results in another component
Add Validation for empty inputs before searching
Let me know if you need modifications! üöÄ


2/2

You said:
What about selection of departure date
ChatGPT said:
üõ†Ô∏è Step 7: Add Departure Date Selection
To allow users to select a departure date, we will:
‚úÖ Use an <input type="date"> for date selection.
‚úÖ Ensure users cannot select past dates.
‚úÖ Store the selected date in the component.

üîπ Update Home Component UI (home.component.html)
üìÇ src/app/components/home/home.component.html

html
Copy
Edit
<div class="container mt-4">
  <h2 class="text-center">Flight Booking</h2>

  <!-- Search Cities for "From" -->
  <div class="mb-3 position-relative">
    <label for="fromCity">From</label>
    <input
      type="text"
      class="form-control"
      id="fromCity"
      placeholder="Enter departure city"
      [(ngModel)]="fromCity"
      (input)="onCityInput($event.target.value)"
    />
    <ul *ngIf="cities.length > 0" class="list-group position-absolute w-100">
      <li *ngFor="let city of cities" class="list-group-item" (click)="selectCity('from', city)">
        {{ city.name }} ({{ city.airportCode }})
      </li>
    </ul>
  </div>

  <!-- Search Cities for "To" -->
  <div class="mb-3 position-relative">
    <label for="toCity">To</label>
    <input
      type="text"
      class="form-control"
      id="toCity"
      placeholder="Enter destination city"
      [(ngModel)]="toCity"
      (input)="onCityInput($event.target.value)"
    />
    <ul *ngIf="cities.length > 0" class="list-group position-absolute w-100">
      <li *ngFor="let city of cities" class="list-group-item" (click)="selectCity('to', city)">
        {{ city.name }} ({{ city.airportCode }})
      </li>
    </ul>
  </div>

  <!-- Select Departure Date -->
  <div class="mb-3">
    <label for="departureDate">Departure Date</label>
    <input
      type="date"
      class="form-control"
      id="departureDate"
      [(ngModel)]="departureDate"
      [min]="minDate"
    />
  </div>

  <button class="btn btn-primary w-100 mt-3" (click)="searchFlights()">Search Flights</button>
</div>
üîπ Update Home Component (home.component.ts)
üìÇ src/app/components/home/home.component.ts

typescript
Copy
Edit
import { Component } from '@angular/core';
import { CityService } from '../../services/city.service';
import { City } from '../../models/city.model';
import { debounceTime, distinctUntilChanged, Subject, switchMap } from 'rxjs';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {
  cities: City[] = [];
  fromCity: string = '';
  toCity: string = '';
  departureDate: string = ''; // Stores selected date  
  minDate: string = ''; // Minimum selectable date  
  searchQuery = new Subject<string>(); // Subject to handle real-time search  

  constructor(private cityService: CityService) {
    // Set minimum date to today  
    const today = new Date();
    this.minDate = today.toISOString().split('T')[0];

    // Set up real-time search with debounce to avoid too many API calls  
    this.searchQuery.pipe(
      debounceTime(300), // Wait for 300ms after typing stops  
      distinctUntilChanged(), // Prevent duplicate requests  
      switchMap(query => this.cityService.searchCities(query)) // Call API  
    ).subscribe(cities => {
      this.cities = cities;
    });
  }

  onCityInput(query: string) {
    this.searchQuery.next(query); // Send input to Subject  
  }

  selectCity(type: 'from' | 'to', city: City) {
    if (type === 'from') {
      this.fromCity = city.name;
    } else {
      this.toCity = city.name;
    }
    this.cities = []; // Hide dropdown after selection  
  }

  searchFlights() {
    if (!this.fromCity || !this.toCity || !this.departureDate) {
      alert("Please select cities and departure date!");
      return;
    }
    
    console.log(`Searching flights from ${this.fromCity} to ${this.toCity} on ${this.departureDate}`);
    // Call FlightService to fetch flights (to be implemented)
  }
}
‚úÖ Final Functionality
User selects "From" and "To" cities.
User picks a departure date. (Past dates are disabled üö´)
Clicking "Search Flights" validates input.
Console logs flight search details. (Will later be connected to Flight API)

üéØ Final Flow
1Ô∏è‚É£ User enters "From City", "To City", and "Date" on Home Page
2Ô∏è‚É£ Clicks "Search Flights"
3Ô∏è‚É£ API is called ‚Üí Flights fetched ‚Üí Navigates to /search-results
4Ô∏è‚É£ Search Page displays flights in a table
