Here's the Final Correct UserRepository.cs
csharp
Copy
Edit
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using SimpleWebApp.Models; // Adjust namespace based on your structure
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace SimpleWebApp.Repositories
{
    public interface IUserRepository
    {
        Task<User> RegisterAsync(User user);
        Task<string> LoginAsync(string username, string password);
    }

    public class UserRepository : IUserRepository
    {
        private readonly SimpleWebAppDBContext _context;
        private readonly IConfiguration _configuration;

        public UserRepository(SimpleWebAppDBContext context, IConfiguration configuration)
        {
            _context = context;
            _configuration = configuration;
        }

        // Register a new user
        public async Task<User> RegisterAsync(User user)
        {
            // Check if username already exists
            var existingUser = await _context.Users.FirstOrDefaultAsync(u => u.Username == user.Username);
            if (existingUser != null)
            {
                throw new Exception("Username already taken.");
            }

            _context.Users.Add(user);
            await _context.SaveChangesAsync();
            return user;
        }

        // Login and generate JWT Token
        public async Task<string> LoginAsync(string username, string password)
        {
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Username == username && u.Password == password);
            if (user == null)
            {
                throw new Exception("Invalid username or password.");
            }

            // If login successful, generate token
            return GenerateJwtToken(user);
        }

        private string GenerateJwtToken(User user)
        {
            var jwtSettings = _configuration.GetSection("JwtSettings");
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings["Key"]));
            var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var claims = new[]
            {
                new Claim(ClaimTypes.NameIdentifier, user.UserId.ToString()),
                new Claim(ClaimTypes.Name, user.Username),
                new Claim(ClaimTypes.Email, user.Email ?? "")
            };

            var token = new JwtSecurityToken(
                issuer: jwtSettings["Issuer"],
                audience: jwtSettings["Audience"],
                claims: claims,
                expires: DateTime.Now.AddHours(1),
                signingCredentials: credentials
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}
‚öôÔ∏è Things this Repository Does:

Feature	Covered
User Registration	‚úÖ
Check if username is already taken	‚úÖ
User Login with Username and Password	‚úÖ
Generate JWT Token if login is successful	‚úÖ
Token contains UserId, Username, Email	‚úÖ
No password hashing (plain password check)	‚úÖ
üõ† Now, How you connect this Repository
Register the Repository in Startup.cs or Program.cs:

csharp
Copy
Edit
builder.Services.AddScoped<IUserRepository, UserRepository>();
Create a UserController.cs to call these methods.

Example:

csharp
Copy
Edit
[Route("api/[controller]")]
[ApiController]
public class UserController : ControllerBase
{
    private readonly IUserRepository _userRepository;

    public UserController(IUserRepository userRepository)
    {
        _userRepository = userRepository;
    }

    [HttpPost("register")]
    [AllowAnonymous]
    public async Task<IActionResult> Register(User user)
    {
        try
        {
            var registeredUser = await _userRepository.RegisterAsync(user);
            return Ok(registeredUser);
        }
        catch (Exception ex)
        {
            return BadRequest(ex.Message);
        }
    }

    [HttpPost("login")]
    [AllowAnonymous]
    public async Task<IActionResult> Login([FromBody] LoginRequest model)
    {
        try
        {
            var token = await _userRepository.LoginAsync(model.Username, model.Password);
            return Ok(new { Token = token });
        }
        catch (Exception ex)
        {
            return Unauthorized(ex.Message);
        }
    }
}
‚úîÔ∏è LoginRequest is a simple DTO:

csharp
Copy
Edit
public class LoginRequest
{
    public string Username { get; set; }
    public string Password { get; set; }
}
üß† Important AppSettings (appsettings.json)
json
Copy
Edit
"JwtSettings": {
  "Key": "ThisIsASecretKeyForJwtToken", 
  "Issuer": "SimpleWebApp",
  "Audience": "SimpleWebAppUsers"
}
‚úÖ Make sure the Key is at least 16 characters for HMAC.

üõ° JWT Authentication Middleware (Program.cs)
csharp
Copy
Edit
var jwtSettings = builder.Configuration.GetSection("JwtSettings");

builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = "JwtBearer";
    options.DefaultChallengeScheme = "JwtBearer";
})
.AddJwtBearer("JwtBearer", options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = jwtSettings["Issuer"],
        ValidAudience = jwtSettings["Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings["Key"]))
    };
});

builder.Services.AddAuthorization();

var app = builder.Build();

app.UseAuthentication();
app.UseAuthorization();
