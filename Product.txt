using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using SimpleWebApp.Controllers;
using SimpleWebApp.Models;
using SimpleWebApp.Repositories;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

namespace SimpleWebApp.Tests.Controllers
{
    [TestClass]
    public class UserControllerTests
    {
        private Mock<IUserRepository> _userRepoMock;
        private UserController _userController;

        [TestInitialize]
        public void Setup()
        {
            _userRepoMock = new Mock<IUserRepository>();
            _userController = new UserController(_userRepoMock.Object);
        }

        [TestMethod]
        public async Task Register_ShouldReturnOk_WhenUserRegistered()
        {
            // Positive case
            var user = new User { Username = "test", Password = "1234", Email = "test@test.com" };
            _userRepoMock.Setup(repo => repo.Register(user)).ReturnsAsync(true);

            var result = await _userController.Register(user) as OkObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(200, result.StatusCode);
        }

        [TestMethod]
        public async Task Register_ShouldReturnBadRequest_WhenRegistrationFails()
        {
            // Negative case
            var user = new User { Username = "test", Password = "1234", Email = "test@test.com" };
            _userRepoMock.Setup(repo => repo.Register(user)).ReturnsAsync(false);

            var result = await _userController.Register(user) as BadRequestObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(400, result.StatusCode);
        }

        [TestMethod]
        public async Task Login_ShouldReturnToken_WhenCredentialsAreValid()
        {
            // Positive case
            var loginModel = new LoginModel { Username = "test", Password = "1234" };
            _userRepoMock.Setup(repo => repo.Login(loginModel)).ReturnsAsync("mocked-token");

            var result = await _userController.Login(loginModel) as OkObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(200, result.StatusCode);
            Assert.AreEqual("mocked-token", (result.Value as dynamic)?.token);
        }

        [TestMethod]
        public async Task Login_ShouldReturnUnauthorized_WhenInvalidCredentials()
        {
            // Negative case
            var loginModel = new LoginModel { Username = "wrong", Password = "wrong" };
            _userRepoMock.Setup(repo => repo.Login(loginModel)).ReturnsAsync((string)null);

            var result = await _userController.Login(loginModel) as UnauthorizedResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(401, result.StatusCode);
        }
    }
}



using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using SimpleWebApp.Controllers;
using SimpleWebApp.Models;
using SimpleWebApp.Repositories;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace SimpleWebApp.Tests.Controllers
{
    [TestClass]
    public class ProductControllerTests
    {
        private Mock<IProductRepository> _productRepoMock;
        private ProductController _productController;

        [TestInitialize]
        public void Setup()
        {
            _productRepoMock = new Mock<IProductRepository>();
            _productController = new ProductController(_productRepoMock.Object);
        }

        [TestMethod]
        public async Task GetAllProducts_ShouldReturnListOfProducts()
        {
            // Positive
            var products = new List<Product>
            {
                new Product { ProductId = 1, ProductName = "Product A" },
                new Product { ProductId = 2, ProductName = "Product B" }
            };
            _productRepoMock.Setup(repo => repo.GetAllProducts()).ReturnsAsync(products);

            var result = await _productController.GetAllProducts() as OkObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(2, (result.Value as List<Product>).Count);
        }

        [TestMethod]
        public async Task GetAllProducts_ShouldReturnEmptyList_WhenNoProducts()
        {
            // Negative
            _productRepoMock.Setup(repo => repo.GetAllProducts()).ReturnsAsync(new List<Product>());

            var result = await _productController.GetAllProducts() as OkObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(0, (result.Value as List<Product>).Count);
        }

        [TestMethod]
        public async Task GetProductById_ShouldReturnProduct_WhenProductExists()
        {
            // Positive
            var product = new Product { ProductId = 1, ProductName = "Product A" };
            _productRepoMock.Setup(repo => repo.GetProductById(1)).ReturnsAsync(product);

            var result = await _productController.GetProductById(1) as OkObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual("Product A", (result.Value as Product).ProductName);
        }

        [TestMethod]
        public async Task GetProductById_ShouldReturnNotFound_WhenProductDoesNotExist()
        {
            // Negative
            _productRepoMock.Setup(repo => repo.GetProductById(99)).ReturnsAsync((Product)null);

            var result = await _productController.GetProductById(99) as NotFoundObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(404, result.StatusCode);
        }

        [TestMethod]
        public async Task AddProduct_ShouldReturnOk_WhenProductAdded()
        {
            // Positive
            var product = new Product { ProductName = "New Product" };
            _productRepoMock.Setup(repo => repo.AddProduct(product)).ReturnsAsync(true);

            var result = await _productController.AddProduct(product) as OkObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(200, result.StatusCode);
        }

        [TestMethod]
        public async Task AddProduct_ShouldReturnBadRequest_WhenAddFails()
        {
            // Negative
            var product = new Product { ProductName = "New Product" };
            _productRepoMock.Setup(repo => repo.AddProduct(product)).ReturnsAsync(false);

            var result = await _productController.AddProduct(product) as BadRequestObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(400, result.StatusCode);
        }

        [TestMethod]
        public async Task UpdateProduct_ShouldReturnOk_WhenProductUpdated()
        {
            // Positive
            var product = new Product { ProductId = 1, ProductName = "Updated Product" };
            _productRepoMock.Setup(repo => repo.UpdateProduct(product)).ReturnsAsync(true);

            var result = await _productController.UpdateProduct(product) as OkObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(200, result.StatusCode);
        }

        [TestMethod]
        public async Task UpdateProduct_ShouldReturnBadRequest_WhenUpdateFails()
        {
            // Negative
            var product = new Product { ProductId = 99, ProductName = "Nonexistent Product" };
            _productRepoMock.Setup(repo => repo.UpdateProduct(product)).ReturnsAsync(false);

            var result = await _productController.UpdateProduct(product) as BadRequestObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(400, result.StatusCode);
        }

        [TestMethod]
        public async Task DeleteProduct_ShouldReturnOk_WhenProductDeleted()
        {
            // Positive
            _productRepoMock.Setup(repo => repo.DeleteProduct(1)).ReturnsAsync(true);

            var result = await _productController.DeleteProduct(1) as OkObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(200, result.StatusCode);
        }

        [TestMethod]
        public async Task DeleteProduct_ShouldReturnBadRequest_WhenDeleteFails()
        {
            // Negative
            _productRepoMock.Setup(repo => repo.DeleteProduct(99)).ReturnsAsync(false);

            var result = await _productController.DeleteProduct(99) as BadRequestObjectResult;

            Assert.IsNotNull(result);
            Assert.AreEqual(400, result.StatusCode);
        }
    }
}


using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using SimpleWebApp.Controllers;
using SimpleWebApp.Models;
using SimpleWebApp.Repositories;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

namespace SimpleWebApp.Tests.Controllers
{
    [TestClass]
    public class UserControllerTests
    {
        private Mock<IUserRepository> _userRepoMock;
        private UserController _userController;

        [TestInitialize]
        public void Setup()
        {
            _userRepoMock = new Mock<IUserRepository>();
            _userController = new UserController(_userRepoMock.Object);
        }

        [TestMethod]
        public async Task Register_ShouldReturnOk_WhenUserRegistered()
        {
            // Arrange
            var user = new User { Username = "test", Password = "1234", Email = "test@test.com" };
            _userRepoMock.Setup(repo => repo.Register(user)).ReturnsAsync(true);

            // Act
            var result = await _userController.Register(user) as OkObjectResult;

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual(200, result.StatusCode);
        }

        [TestMethod]
        public async Task Login_ShouldReturnToken_WhenCredentialsAreValid()
        {
            // Arrange
            var loginModel = new LoginModel { Username = "test", Password = "1234" };
            _userRepoMock.Setup(repo => repo.Login(loginModel)).ReturnsAsync("mocked-token");

            // Act
            var result = await _userController.Login(loginModel) as OkObjectResult;

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual(200, result.StatusCode);
            Assert.AreEqual("mocked-token", (result.Value as dynamic)?.token);
        }

        [TestMethod]
        public async Task Login_ShouldReturnUnauthorized_WhenInvalidCredentials()
        {
            // Arrange
            var loginModel = new LoginModel { Username = "wrong", Password = "wrong" };
            _userRepoMock.Setup(repo => repo.Login(loginModel)).ReturnsAsync((string)null);

            // Act
            var result = await _userController.Login(loginModel) as UnauthorizedResult;

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual(401, result.StatusCode);
        }
    }
}





using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using SimpleWebApp.Controllers;
using SimpleWebApp.Models;
using SimpleWebApp.Repositories;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace SimpleWebApp.Tests.Controllers
{
    [TestClass]
    public class ProductControllerTests
    {
        private Mock<IProductRepository> _productRepoMock;
        private ProductController _productController;

        [TestInitialize]
        public void Setup()
        {
            _productRepoMock = new Mock<IProductRepository>();
            _productController = new ProductController(_productRepoMock.Object);
        }

        [TestMethod]
        public async Task GetAllProducts_ShouldReturnListOfProducts()
        {
            // Arrange
            var products = new List<Product>
            {
                new Product { ProductId = 1, ProductName = "Product A" },
                new Product { ProductId = 2, ProductName = "Product B" }
            };
            _productRepoMock.Setup(repo => repo.GetAllProducts()).ReturnsAsync(products);

            // Act
            var result = await _productController.GetAllProducts() as OkObjectResult;

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual(2, (result.Value as List<Product>).Count);
        }

        [TestMethod]
        public async Task GetProductById_ShouldReturnProduct_WhenProductExists()
        {
            // Arrange
            var product = new Product { ProductId = 1, ProductName = "Product A" };
            _productRepoMock.Setup(repo => repo.GetProductById(1)).ReturnsAsync(product);

            // Act
            var result = await _productController.GetProductById(1) as OkObjectResult;

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual("Product A", (result.Value as Product).ProductName);
        }

        [TestMethod]
        public async Task AddProduct_ShouldReturnOk_WhenProductAdded()
        {
            // Arrange
            var product = new Product { ProductName = "New Product" };
            _productRepoMock.Setup(repo => repo.AddProduct(product)).ReturnsAsync(true);

            // Act
            var result = await _productController.AddProduct(product) as OkObjectResult;

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual(200, result.StatusCode);
        }

        [TestMethod]
        public async Task UpdateProduct_ShouldReturnOk_WhenProductUpdated()
        {
            // Arrange
            var product = new Product { ProductId = 1, ProductName = "Updated Product" };
            _productRepoMock.Setup(repo => repo.UpdateProduct(product)).ReturnsAsync(true);

            // Act
            var result = await _productController.UpdateProduct(product) as OkObjectResult;

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual(200, result.StatusCode);
        }

        [TestMethod]
        public async Task DeleteProduct_ShouldReturnOk_WhenProductDeleted()
        {
            // Arrange
            _productRepoMock.Setup(repo => repo.DeleteProduct(1)).ReturnsAsync(true);

            // Act
            var result = await _productController.DeleteProduct(1) as OkObjectResult;

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual(200, result.StatusCode);
        }
    }
}
