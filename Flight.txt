‚úÖ Step 1: Update Search Component to Accept Flight Data
The Search Component will now take flight results as input from the Home Component.

üîπ search.component.ts
typescript
Copy
Edit
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.css']
})
export class SearchComponent {
  @Input() flights: any[] = []; // Accepting flight data

  constructor() { }

  // Format flight duration nicely
  getFlightDuration(departure: string, arrival: string): string {
    const dep = new Date(departure);
    const arr = new Date(arrival);
    const diff = (arr.getTime() - dep.getTime()) / (1000 * 60); // Difference in minutes
    const hours = Math.floor(diff / 60);
    const minutes = diff % 60;
    return `${hours}h ${minutes}m`;
  }
}
‚úÖ Step 2: Update Search Component HTML for Flight Display
üîπ search.component.html
html
Copy
Edit
<div class="container mt-3">
  <h3 *ngIf="flights.length > 0" class="mb-3">Available Flights</h3>
  <div *ngIf="flights.length === 0" class="text-center">
    <p>No flights found. Try another search.</p>
  </div>

  <div *ngFor="let flight of flights" class="flight-card">
    <div class="flight-info">
      <div>
        <strong>{{ flight.airline }}</strong> <br>
        <span>{{ flight.flightNumber }}</span>
      </div>
      <div>
        <strong>{{ flight.departureTime | date:'shortTime' }}</strong> <br>
        {{ flight.fromCity }} ({{ flight.fromAirportCode }})
      </div>
      <div>
        <span class="duration">{{ getFlightDuration(flight.departureTime, flight.arrivalTime) }}</span>
      </div>
      <div>
        <strong>{{ flight.arrivalTime | date:'shortTime' }}</strong> <br>
        {{ flight.toCity }} ({{ flight.toAirportCode }})
      </div>
      <div class="price">
        <strong>‚Çπ{{ flight.price }}</strong>
      </div>
      <button class="btn btn-primary" (click)="bookFlight(flight)">Book</button>
    </div>
  </div>
</div>
‚úÖ Step 3: Update Styling for Better UX
üîπ search.component.css
css
Copy
Edit
.container {
  max-width: 800px;
  margin: auto;
}

.flight-card {
  border: 1px solid #ddd;
  border-radius: 10px;
  padding: 15px;
  margin-bottom: 15px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: white;
  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
}

.flight-info {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
}

.duration {
  color: gray;
  font-size: 14px;
}

.price {
  font-size: 18px;
  color: #007bff;
}

.btn {
  margin-left: 10px;
}
‚úÖ Step 4: Fetch Flight Data in Home Component
Now we will fetch flights from the API and pass the data to the Search Component.

üîπ home.component.ts
typescript
Copy
Edit
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {
  fromCity = '';
  toCity = '';
  departureDate = '';
  flights: any[] = []; // Store flight results

  constructor(private http: HttpClient) {}

  searchFlights() {
    if (!this.fromCity || !this.toCity || !this.departureDate) {
      alert('Please fill all fields.');
      return;
    }

    const apiUrl = `api/flight/search?from=${this.fromCity}&to=${this.toCity}&date=${this.departureDate}`;
    this.http.get<any[]>(apiUrl).subscribe(
      (data) => {
        this.flights = data;
      },
      (error) => {
        console.error('Error fetching flights:', error);
        alert('Error fetching flights.');
      }
    );
  }
}
‚úÖ Step 5: Update Home Component HTML to Trigger Search
üîπ home.component.html
html
Copy
Edit
<div class="container mt-5">
  <h2>Search Flights</h2>

  <div class="form-group">
    <label>From City</label>
    <input type="text" [(ngModel)]="fromCity" class="form-control">
  </div>

  <div class="form-group">
    <label>To City</label>
    <input type="text" [(ngModel)]="toCity" class="form-control">
  </div>

  <div class="form-group">
    <label>Departure Date</label>
    <input type="date" [(ngModel)]="departureDate" class="form-control">
  </div>

  <button class="btn btn-primary mt-3" (click)="searchFlights()">Search Flights</button>

  <app-search [flights]="flights"></app-search>
</div>
‚úÖ Summary
‚úî Flight Search Flow
1Ô∏è‚É£ User enters departure city, destination, and date.
2Ô∏è‚É£ Clicks ‚ÄòSearch Flights‚Äô ‚Üí API call is made.
3Ô∏è‚É£ Flights are fetched & displayed in Search Component.
4Ô∏è‚É£ User sees clean, structured flight details.

üöÄ Next Steps
Now that we have Flight Search Results working: 1Ô∏è‚É£ Passenger Booking Form ‚Äì Enter passenger details.
2Ô∏è‚É£ Payment Page ‚Äì Make payment & confirm booking.
3Ô∏è‚É£ Booking Confirmation Page ‚Äì Show booking details.

üéØ Let me know what you want to build next! üöÄ

You said:
What about flight service
ChatGPT said:
Good point! Let's create the Flight Service to handle API calls for searching flights. This will keep our code modular and clean.

‚úÖ Step 1: Create Flight Service
This service will:

Fetch available flights from the API.
Provide an easy-to-use function for searching flights.
üîπ Generate Flight Service (if not created)
Run this command in the terminal:

sh
Copy
Edit
ng generate service services/flight
üîπ flight.service.ts
typescript
Copy
Edit
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class FlightService {
  private apiUrl = 'http://localhost:5000/api/flight'; // Change this to your actual API

  constructor(private http: HttpClient) {}

  searchFlights(from: string, to: string, date: string): Observable<any[]> {
    const url = `${this.apiUrl}/search?from=${from}&to=${to}&date=${date}`;
    return this.http.get<any[]>(url);
  }
}
‚úÖ Step 2: Use Flight Service in Home Component
Now, update home.component.ts to use this service instead of directly making HTTP requests.

üîπ home.component.ts (Updated)
typescript
Copy
Edit
import { Component } from '@angular/core';
import { FlightService } from '../services/flight.service';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {
  fromCity = '';
  toCity = '';
  departureDate = '';
  flights: any[] = []; // Store flight results

  constructor(private flightService: FlightService) {}

  searchFlights() {
    if (!this.fromCity || !this.toCity || !this.departureDate) {
      alert('Please fill all fields.');
      return;
    }

    this.flightService.searchFlights(this.fromCity, this.toCity, this.departureDate)
      .subscribe(
        (data) => {
          this.flights = data;
        },
        (error) => {
          console.error('Error fetching flights:', error);
          alert('Error fetching flights.');
        }
      );
  }
}
‚úÖ Step 3: Add HttpClientModule
Make sure HttpClientModule is imported in app.module.ts, otherwise, HTTP requests won‚Äôt work.

üîπ app.module.ts
typescript
Copy
Edit
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http'; // Add this

import { AppComponent } from './app.component';
import { HomeComponent } from './home/home.component';
import { SearchComponent } from './search/search.component';

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    SearchComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule // Add this
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
‚úÖ Summary
‚úî Now, the Flight Search Flow Works Like This:
1Ô∏è‚É£ User enters From City, To City, and Date.
2Ô∏è‚É£ Clicks Search Flights ‚Üí Calls searchFlights() in HomeComponent.
3Ô∏è‚É£ HomeComponent calls FlightService.searchFlights().
4Ô∏è‚É£ FlightService makes an API request to fetch flights.
5Ô∏è‚É£ API returns a list of flights ‚Üí Displayed in the Search Component.

üöÄ Next Steps
‚úÖ We have a working Flight Search Page.
üéØ What‚Äôs next? Do you want to proceed with:
1Ô∏è‚É£ Passenger Booking Page (Enter passenger details)
2Ô∏è‚É£ Flight Booking Confirmation Page
3Ô∏è‚É£ Payment Page

Let me know! üöÄ

You said:
I have fight model in my frontend so that when API called all data of flights will be recieved
ChatGPT said:
Great! Since you have a Flight Model in your frontend, we should use it to ensure type safety and better data handling. Let‚Äôs integrate it properly.

‚úÖ Step 1: Define the Flight Model
Create a flight.model.ts file inside the models folder.

üîπ Generate the model file (if not created)
Run this command in the terminal:

sh
Copy
Edit
ng generate interface models/flight
üîπ flight.model.ts
typescript
Copy
Edit
export interface Flight {
  id: number;
  airline: string;
  flightNumber: string;
  fromCity: string;
  toCity: string;
  departureTime: string;
  arrivalTime: string;
  duration: string;
  price: number;
  availableSeats: number;
}
‚úÖ Step 2: Update Flight Service
Modify flight.service.ts to use the Flight Model.

üîπ flight.service.ts (Updated)
typescript
Copy
Edit
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Flight } from '../models/flight'; // Import Flight model

@Injectable({
  providedIn: 'root'
})
export class FlightService {
  private apiUrl = 'http://localhost:5000/api/flight'; // Update with your actual API URL

  constructor(private http: HttpClient) {}

  searchFlights(from: string, to: string, date: string): Observable<Flight[]> {
    const url = `${this.apiUrl}/search?from=${from}&to=${to}&date=${date}`;
    return this.http.get<Flight[]>(url); // Use Flight model
  }
}
‚úÖ Step 3: Update Home Component
Now, modify home.component.ts to ensure it works with the Flight Model.

üîπ home.component.ts (Updated)
typescript
Copy
Edit
import { Component } from '@angular/core';
import { FlightService } from '../services/flight.service';
import { Flight } from '../models/flight'; // Import Flight model

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {
  fromCity = '';
  toCity = '';
  departureDate = '';
  flights: Flight[] = []; // Use Flight model

  constructor(private flightService: FlightService) {}

  searchFlights() {
    if (!this.fromCity || !this.toCity || !this.departureDate) {
      alert('Please fill all fields.');
      return;
    }

    this.flightService.searchFlights(this.fromCity, this.toCity, this.departureDate)
      .subscribe(
        (data: Flight[]) => { // Use Flight[] type
          this.flights = data;
        },
        (error) => {
          console.error('Error fetching flights:', error);
          alert('Error fetching flights.');
        }
      );
  }
}
‚úÖ Step 4: Update the Search Results Component
Modify search.component.ts to use the Flight model.

üîπ search.component.ts
typescript
Copy
Edit
import { Component, Input } from '@angular/core';
import { Flight } from '../models/flight'; // Import Flight model

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.css']
})
export class SearchComponent {
  @Input() flights: Flight[] = []; // Use Flight model
}
‚úÖ Step 5: Display Flight Results in search.component.html
Modify search.component.html to display flight details properly.

üîπ search.component.html
html
Copy
Edit
<div class="container mt-4">
  <h2>Flight Search Results</h2>
  
  <div *ngIf="flights.length > 0; else noFlights">
    <div class="card mb-3" *ngFor="let flight of flights">
      <div class="card-body">
        <h5 class="card-title">{{ flight.airline }} - {{ flight.flightNumber }}</h5>
        <p class="card-text">
          <strong>From:</strong> {{ flight.fromCity }} | 
          <strong>To:</strong> {{ flight.toCity }}
        </p>
        <p class="card-text">
          <strong>Departure:</strong> {{ flight.departureTime }} |
          <strong>Arrival:</strong> {{ flight.arrivalTime }}
        </p>
        <p class="card-text">
          <strong>Duration:</strong> {{ flight.duration }} |
          <strong>Seats Available:</strong> {{ flight.availableSeats }}
        </p>
        <p class="card-text">
          <strong>Price:</strong> ‚Çπ{{ flight.price }}
        </p>
        <button class="btn btn-primary">Book Now</button>
      </div>
    </div>
  </div>

  <ng-template #noFlights>
    <p>No flights found. Try a different search.</p>
  </ng-template>
</div>
‚úÖ Step 6: Ensure HttpClientModule is Imported
Make sure HttpClientModule is present in app.module.ts or app.config.ts (if using standalone mode).

üîπ app.module.ts
typescript
Copy
Edit
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  imports: [
    HttpClientModule // Ensure this is imported
  ]
})
export class AppModule { }
‚úÖ Summary
‚úî Created a Flight Model (flight.model.ts) for type safety.
‚úî Updated Flight Service (flight.service.ts) to use the Flight Model.
‚úî Updated Home Component (home.component.ts) to fetch and store flights properly.
‚úî Updated Search Component (search.component.ts & search.component.html) to display results in a proper UI.
üöÄ Next Steps
We now have a fully functional Flight Search Page! üéâ







1Ô∏è‚É£ Modify search.component.ts
‚úÖ Retrieves flight data from router navigation state
‚úÖ If no flights are found, it shows a message
‚úÖ Displays flights in a neat table

typescript
Copy
Edit
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Flight } from '../models/flight';

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.css']
})
export class SearchComponent implements OnInit {
  flights: Flight[] = [];

  constructor(private router: Router, private route: ActivatedRoute) {}

  ngOnInit() {
    // Get flight data from navigation state
    const state = history.state;
    this.flights = state.flights || [];

    if (this.flights.length === 0) {
      alert('No flights found. Redirecting to home page.');
      this.router.navigate(['/']); // Redirect if no flights
    }
  }

  bookFlight(flight: Flight) {
    alert(`Booking flight: ${flight.airline} - ${flight.flightNumber}`);
    // Redirect to booking page if implemented
    // this.router.navigate(['/booking'], { state: { flight } });
  }
}
2Ô∏è‚É£ Modify search.component.html
‚úÖ Displays search results in a structured table
‚úÖ Shows "No flights found" message if the list is empty
‚úÖ Includes a "Book" button for each flight

html
Copy
Edit
<div class="container mt-4">
  <h2>Available Flights</h2>

  <div *ngIf="flights.length > 0; else noFlights">
    <table class="table table-bordered mt-3">
      <thead class="table-dark">
        <tr>
          <th>Flight Number</th>
          <th>Airline</th>
          <th>Departure</th>
          <th>Arrival</th>
          <th>Duration</th>
          <th>Fare</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let flight of flights">
          <td>{{ flight.flightNumber }}</td>
          <td>{{ flight.airline }}</td>
          <td>{{ flight.departureTime }}</td>
          <td>{{ flight.arrivalTime }}</td>
          <td>{{ flight.duration }}</td>
          <td>‚Çπ{{ flight.fare }}</td>
          <td>
            <button class="btn btn-success" (click)="bookFlight(flight)">Book</button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <!-- No Flights Found Message -->
  <ng-template #noFlights>
    <p class="text-danger mt-4">No flights found. Try searching again.</p>
  </ng-template>

  <button class="btn btn-secondary mt-3" (click)="router.navigate(['/'])">Go Back</button>
</div>
