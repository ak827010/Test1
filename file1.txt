Implementing Booking Service (Microservice)
The Booking Service handles:
‚úî Booking Tickets and Generating Reference Numbers
‚úî Saving Passenger Details
‚úî Fetching Booking Details using Reference Number
‚úî Calling Fare Service to Calculate Fare

Since this is a microservice, it will:

Call Fare Service to fetch fare.
Store booking and passenger details in SQL Server.
Return a reference number to the user.
‚úÖ Update IBookingRepository.cs
We need methods to:
1Ô∏è‚É£ Book a flight
2Ô∏è‚É£ Fetch booking details using a reference number

csharp
Copy
Edit
public interface IBookingRepository
{
    Task<string> BookFlightAsync(BookingRequest request);
    Task<BookingDetails> GetBookingDetailsAsync(string referenceNumber);
}
‚úÖ Implement BookingRepository.cs
This repository:

Calls Fare Service to get total fare.
Stores booking & passenger details in the database.
csharp
Copy
Edit
public class BookingRepository : IBookingRepository
{
    private readonly BookingDbContext _context;
    private readonly HttpClient _httpClient;
    private readonly IConfiguration _configuration;

    public BookingRepository(BookingDbContext context, HttpClient httpClient, IConfiguration configuration)
    {
        _context = context;
        _httpClient = httpClient;
        _configuration = configuration;
    }

    public async Task<string> BookFlightAsync(BookingRequest request)
    {
        try
        {
            // Call Fare Service to get flight fare
            string fareServiceUrl = _configuration["FareServiceUrl"] + $"/api/fare/{request.FlightId}";
            var fareResponse = await _httpClient.GetAsync(fareServiceUrl);
            if (!fareResponse.IsSuccessStatusCode)
                throw new Exception("Error fetching fare details.");

            var fareData = JsonConvert.DeserializeObject<FareResponse>(await fareResponse.Content.ReadAsStringAsync());
            decimal totalFare = fareData.TotalFare;

            // Generate a unique reference number
            string referenceNumber = "AB" + DateTime.Now.Year + new Random().Next(1000, 9999);

            // Save booking details
            var booking = new Booking
            {
                ReferenceNumber = referenceNumber,
                FlightId = request.FlightId,
                TotalFare = totalFare
            };

            _context.Bookings.Add(booking);
            await _context.SaveChangesAsync();

            // Save passenger details
            foreach (var passenger in request.Passengers)
            {
                _context.Passengers.Add(new Passenger
                {
                    BookingReference = referenceNumber,
                    Name = passenger.Name,
                    Age = passenger.Age
                });
            }

            await _context.SaveChangesAsync();
            return referenceNumber;
        }
        catch (Exception ex)
        {
            throw new Exception("Booking failed: " + ex.Message);
        }
    }

    public async Task<BookingDetails> GetBookingDetailsAsync(string referenceNumber)
    {
        try
        {
            var booking = await _context.Bookings.Include(b => b.Passengers)
                .FirstOrDefaultAsync(b => b.ReferenceNumber == referenceNumber);

            if (booking == null)
                throw new Exception("Booking not found.");

            return new BookingDetails
            {
                ReferenceNumber = booking.ReferenceNumber,
                FlightId = booking.FlightId,
                TotalFare = booking.TotalFare,
                Passengers = booking.Passengers.Select(p => new PassengerDTO
                {
                    Name = p.Name,
                    Age = p.Age
                }).ToList()
            };
        }
        catch (Exception ex)
        {
            throw new Exception("Error fetching booking details: " + ex.Message);
        }
    }
}
‚úÖ Implement BookingController.cs
The controller exposes APIs for:
‚úî Booking a Flight
‚úî Fetching Booking Details by Reference Number

csharp
Copy
Edit
[Route("api/[controller]")]
[ApiController]
public class BookingController : ControllerBase
{
    private readonly IBookingRepository _bookingRepository;

    public BookingController(IBookingRepository bookingRepository)
    {
        _bookingRepository = bookingRepository;
    }

    // üîπ Book a Flight
    [HttpPost]
    public async Task<IActionResult> BookFlight([FromBody] BookingRequest request)
    {
        try
        {
            string referenceNumber = await _bookingRepository.BookFlightAsync(request);
            return Ok(new { ReferenceNumber = referenceNumber, Message = "Booking successful!" });
        }
        catch (Exception ex)
        {
            return StatusCode(500, "Error booking flight: " + ex.Message);
        }
    }

    // üîπ Fetch Booking Details
    [HttpGet("{referenceNumber}")]
    public async Task<IActionResult> GetBookingDetails(string referenceNumber)
    {
        try
        {
            var bookingDetails = await _bookingRepository.GetBookingDetailsAsync(referenceNumber);
            return Ok(bookingDetails);
        }
        catch (Exception ex)
        {
            return StatusCode(500, "Error fetching booking details: " + ex.Message);
        }
    }
}
üîπ Database Models
We need two tables:
1Ô∏è‚É£ Booking Table ‚Äì Stores booking details.
2Ô∏è‚É£ Passenger Table ‚Äì Stores passenger details for each booking.

csharp
Copy
Edit
public class Booking
{
    [Key]
    public int Id { get; set; }
    public string ReferenceNumber { get; set; }
    public int FlightId { get; set; }
    public decimal TotalFare { get; set; }
    public List<Passenger> Passengers { get; set; }
}

public class Passenger
{
    [Key]
    public int Id { get; set; }
    public string BookingReference { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
}
üîπ Database Context (BookingDbContext.cs)
csharp
Copy
Edit
public class BookingDbContext : DbContext
{
    public BookingDbContext(DbContextOptions<BookingDbContext> options) : base(options) { }

    public DbSet<Booking> Bookings { get; set; }
    public DbSet<Passenger> Passengers { get; set; }
}
üîπ Configurations (appsettings.json)
Since we need to call other microservices, we store their URLs in appsettings.json.

json
Copy
Edit
{
  "ConnectionStrings": {
    "BookingDb": "Server=(local)\\sqlexpress;Database=BookingDB;Trusted_Connection=True;"
  },
  "FareServiceUrl": "http://localhost:5003"
}
‚úÖ Testing the API
Action	Method	Endpoint	Response
Book a Flight	POST	/api/booking	{ "ReferenceNumber": "AB20251234", "Message": "Booking successful!" }
Fetch Booking Details	GET	/api/booking/AB20251234	{ "ReferenceNumber": "AB20251234", "FlightId": 1, "TotalFare": 7500, "Passengers": [{ "Name": "John Doe", "Age": 30 }] }
üîπ Key Features
‚úî Microservice Communication ‚Äì Calls Fare Service before booking.
‚úî Error Handling ‚Äì Proper exceptions for booking failures.
‚úî Database Integration ‚Äì Uses SQL Server for storing booking and passenger details.




üöÄ Implementing Check-in Service (Microservice)
The Check-in Service handles:
‚úî Web Check-in for a Booking
‚úî Assigning Seats Automatically
‚úî Generating a Check-in ID
‚úî Fetching Check-in Details Using Reference Number

Since this is a microservice, it will:

Call Booking Service to validate the reference number.
Assign seats to passengers.
Store check-in details in SQL Server.
‚úÖ Update ICheckinRepository.cs
We need methods to:
1Ô∏è‚É£ Perform check-in
2Ô∏è‚É£ Fetch check-in details using reference number

csharp
Copy
Edit
public interface ICheckinRepository
{
    Task<string> PerformCheckinAsync(string referenceNumber);
    Task<CheckinDetails> GetCheckinDetailsAsync(string referenceNumber);
}
‚úÖ Implement CheckinRepository.cs
This repository:

Calls Booking Service to validate the booking.
Assigns seat numbers randomly.
Stores check-in details in the database.
csharp
Copy
Edit
public class CheckinRepository : ICheckinRepository
{
    private readonly CheckinDbContext _context;
    private readonly HttpClient _httpClient;
    private readonly IConfiguration _configuration;

    public CheckinRepository(CheckinDbContext context, HttpClient httpClient, IConfiguration configuration)
    {
        _context = context;
        _httpClient = httpClient;
        _configuration = configuration;
    }

    public async Task<string> PerformCheckinAsync(string referenceNumber)
    {
        try
        {
            // Call Booking Service to validate reference number
            string bookingServiceUrl = _configuration["BookingServiceUrl"] + $"/api/booking/{referenceNumber}";
            var bookingResponse = await _httpClient.GetAsync(bookingServiceUrl);
            if (!bookingResponse.IsSuccessStatusCode)
                throw new Exception("Invalid booking reference number.");

            // Generate a unique check-in ID
            string checkinId = "CHK" + new Random().Next(10000, 99999);

            // Generate seat numbers randomly
            var assignedSeats = new List<string>();
            Random random = new Random();
            int totalPassengers = random.Next(1, 6); // Assume a max of 5 passengers per booking
            for (int i = 0; i < totalPassengers; i++)
            {
                assignedSeats.Add("A" + random.Next(1, 50)); // Assign seats like A12, B7
            }

            // Save check-in details
            var checkin = new Checkin
            {
                CheckinId = checkinId,
                ReferenceNumber = referenceNumber,
                AssignedSeats = string.Join(",", assignedSeats)
            };

            _context.Checkins.Add(checkin);
            await _context.SaveChangesAsync();
            return checkinId;
        }
        catch (Exception ex)
        {
            throw new Exception("Check-in failed: " + ex.Message);
        }
    }

    public async Task<CheckinDetails> GetCheckinDetailsAsync(string referenceNumber)
    {
        try
        {
            var checkin = await _context.Checkins
                .FirstOrDefaultAsync(c => c.ReferenceNumber == referenceNumber);

            if (checkin == null)
                throw new Exception("Check-in details not found.");

            return new CheckinDetails
            {
                CheckinId = checkin.CheckinId,
                ReferenceNumber = checkin.ReferenceNumber,
                AssignedSeats = checkin.AssignedSeats.Split(',')
            };
        }
        catch (Exception ex)
        {
            throw new Exception("Error fetching check-in details: " + ex.Message);
        }
    }
}
‚úÖ Implement CheckinController.cs
The controller exposes APIs for:
‚úî Performing Web Check-in
‚úî Fetching Check-in Details by Reference Number

csharp
Copy
Edit
[Route("api/[controller]")]
[ApiController]
public class CheckinController : ControllerBase
{
    private readonly ICheckinRepository _checkinRepository;

    public CheckinController(ICheckinRepository checkinRepository)
    {
        _checkinRepository = checkinRepository;
    }

    // üîπ Perform Check-in
    [HttpPost("{referenceNumber}")]
    public async Task<IActionResult> PerformCheckin(string referenceNumber)
    {
        try
        {
            string checkinId = await _checkinRepository.PerformCheckinAsync(referenceNumber);
            return Ok(new { CheckinId = checkinId, Message = "Check-in successful!" });
        }
        catch (Exception ex)
        {
            return StatusCode(500, "Error during check-in: " + ex.Message);
        }
    }

    // üîπ Fetch Check-in Details
    [HttpGet("{referenceNumber}")]
    public async Task<IActionResult> GetCheckinDetails(string referenceNumber)
    {
        try
        {
            var checkinDetails = await _checkinRepository.GetCheckinDetailsAsync(referenceNumber);
            return Ok(checkinDetails);
        }
        catch (Exception ex)
        {
            return StatusCode(500, "Error fetching check-in details: " + ex.Message);
        }
    }
}
üîπ Database Models
We need one table:
1Ô∏è‚É£ Checkin Table ‚Äì Stores check-in details for each booking.

csharp
Copy
Edit
public class Checkin
{
    [Key]
    public int Id { get; set; }
    public string CheckinId { get; set; }
    public string ReferenceNumber { get; set; }
    public string AssignedSeats { get; set; } // Stored as "A12,B7,C4"
}
üîπ Database Context (CheckinDbContext.cs)
csharp
Copy
Edit
public class CheckinDbContext : DbContext
{
    public CheckinDbContext(DbContextOptions<CheckinDbContext> options) : base(options) { }

    public DbSet<Checkin> Checkins { get; set; }
}
üîπ Configurations (appsettings.json)
Since we need to call Booking Service, we store its URL in appsettings.json.

json
Copy
Edit
{
  "ConnectionStrings": {
    "CheckinDb": "Server=(local)\\sqlexpress;Database=CheckinDB;Trusted_Connection=True;"
  },
  "BookingServiceUrl": "http://localhost:5004"
}
‚úÖ Testing the API
Action	Method	Endpoint	Response
Perform Check-in	POST	/api/checkin/AB20251234	{ "CheckinId": "CHK12345", "Message": "Check-in successful!" }
Fetch Check-in Details	GET	/api/checkin/AB20251234	{ "CheckinId": "CHK12345", "ReferenceNumber": "AB20251234", "AssignedSeats": ["A12", "B7"] }