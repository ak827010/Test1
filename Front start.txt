📌 Step 1: Install Angular CLI & Create a New Project
1️⃣ Install Angular CLI (if not already installed):

sh
Copy
Edit
npm install -g @angular/cli
2️⃣ Create a new Angular project:

sh
Copy
Edit
ng new flights-app
It will ask:
Would you like to add Angular routing? → Yes
Which CSS preprocessor to use? → Choose CSS
3️⃣ Navigate into the project:

sh
Copy
Edit
cd flights-app
4️⃣ Run the application:

sh
Copy
Edit
ng serve
Open your browser and go to http://localhost:4200
✅ Now you have a working Angular project!

📌 Step 2: Install Required Packages
We'll install some necessary libraries for Bootstrap, HTTP handling, JWT authentication, and routing guards.

sh
Copy
Edit
npm install bootstrap @auth0/angular-jwt
Bootstrap → Used for styling
@auth0/angular-jwt → Used to handle JWT authentication
✅ Now, configure Bootstrap:
Open angular.json and add Bootstrap CSS under "styles":

json
Copy
Edit
"styles": [
  "node_modules/bootstrap/dist/css/bootstrap.min.css",
  "src/styles.css"
]
📌 Step 3: Plan the Folder Structure
We will structure the project for better scalability.

ruby
Copy
Edit
flights-app/
│── src/
│   ├── app/
│   │   ├── components/        # All UI components (Search, Booking, etc.)
│   │   ├── pages/             # Complete pages (Home, Admin Dashboard, etc.)
│   │   ├── services/          # API service files (Auth, Booking, etc.)
│   │   ├── models/            # Interfaces for data models
│   │   ├── guards/            # Auth guards for admin access
│   │   ├── app-routing.module.ts  # App Routing
│   │   ├── app.module.ts      # Main module
│   ├── assets/                # Static assets like images
│   ├── styles.css             # Global styles
📌 Step 4: Create Essential Angular Modules & Components
We'll generate components for each page using Angular CLI.

sh
Copy
Edit
ng g c pages/home
ng g c pages/search-flights
ng g c pages/booking
ng g c pages/check-in
ng g c pages/admin-dashboard
ng g c pages/login
✅ These are the key pages:

Home Page → Displays a welcome message with search options.
Search Flights → Allows users to search for available flights.
Booking Page → Lets users book a flight.
Check-in Page → Allows passengers to check in.
Admin Dashboard → Restricted access for admins to manage flights and cities.
Login Page → Allows the admin to log in.
📌 Step 5: Create Services for API Calls
We'll create separate services to handle API communication.

sh
Copy
Edit
ng g s services/auth
ng g s services/flight
ng g s services/booking
ng g s services/checkin
ng g s services/city
✅ Services will handle API requests for:

Authentication (auth.service.ts)
Flight Search (flight.service.ts)
Booking (booking.service.ts)
Check-in (checkin.service.ts)
City Management (city.service.ts)
📌 Step 6: Set Up Routing
Modify app-routing.module.ts to define routes for our pages.

📌 src/app/app-routing.module.ts

typescript
Copy
Edit
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './pages/home/home.component';
import { SearchFlightsComponent } from './pages/search-flights/search-flights.component';
import { BookingComponent } from './pages/booking/booking.component';
import { CheckInComponent } from './pages/check-in/check-in.component';
import { AdminDashboardComponent } from './pages/admin-dashboard/admin-dashboard.component';
import { LoginComponent } from './pages/login/login.component';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'search-flights', component: SearchFlightsComponent },
  { path: 'booking', component: BookingComponent },
  { path: 'check-in', component: CheckInComponent },
  { path: 'admin', component: AdminDashboardComponent },
  { path: 'login', component: LoginComponent },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
✅ Now, Angular knows how to navigate between pages!

📌 Step 7: Set Up Authentication Handling
Since only admins can log in, we need an Auth Guard.

1️⃣ Generate Auth Guard

sh
Copy
Edit
ng g guard guards/auth
2️⃣ Modify auth.guard.ts 📌 src/app/guards/auth.guard.ts

typescript
Copy
Edit
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): boolean {
    if (this.authService.isLoggedIn()) {
      return true;
    } else {
      this.router.navigate(['/login']);
      return false;
    }
  }
}
✅ Now, protect the admin route!
Modify app-routing.module.ts:

typescript
Copy
Edit
import { AuthGuard } from './guards/auth.guard';

const routes: Routes = [
  { path: 'admin', component: AdminDashboardComponent, canActivate: [AuthGuard] }
];
📌 Step 8: Setup Global Navbar
We need a Navbar so users can navigate between pages.

📌 Generate Navbar Component

sh
Copy
Edit
ng g c components/navbar
📌 Modify navbar.component.html

html
Copy
Edit
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <a class="navbar-brand" routerLink="/">FlightsApp</a>
  <div class="collapse navbar-collapse">
    <ul class="navbar-nav">
      <li class="nav-item"><a class="nav-link" routerLink="/">Home</a></li>
      <li class="nav-item"><a class="nav-link" routerLink="/search-flights">Search Flights</a></li>
      <li class="nav-item"><a class="nav-link" routerLink="/check-in">Check-In</a></li>
      <li class="nav-item"><a class="nav-link" routerLink="/admin">Admin Dashboard</a></li>
    </ul>
  </div>
</nav>
✅ Now, add it to app.component.html

html
Copy
Edit
<app-navbar></app-navbar>
<router-outlet></router-outlet>
📌 Next Steps
🔹 We have successfully set up the Angular 19 project!
🔹 Now, we can start developing the Login Page first.

Would you like me to generate the Login Page next and integrate it with the backend JWT authentication? 🎯

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  constructor() {}

  // ✅ Check if user is logged in
  isLoggedIn(): boolean {
    return !!sessionStorage.getItem('token'); // Returns true if token exists
  }

  // ✅ Save token in session storage
  saveToken(token: string): void {
    sessionStorage.setItem('token', token);
  }

  // ✅ Remove token on logout
  logout(): void {
    sessionStorage.removeItem('token');
  }
}
Login Page Implementation with JWT Authentication
Now, we will create the Login Page and integrate it with the backend authentication service using JWT. Below is the step-by-step process.

📝 Steps to Implement the Login Page
1️⃣ Create the Login Component
Run the following command in your Angular project:

sh
Copy
Edit
ng g c components/login
This will generate the login component inside the components folder.

2️⃣ Update login.component.html
Replace the content with the following Bootstrap-styled login form:

html
Copy
Edit
<div class="container d-flex justify-content-center align-items-center vh-100">
  <div class="card p-4 shadow-lg" style="width: 400px;">
    <h3 class="text-center mb-3">Admin Login</h3>
    
    <form (ngSubmit)="onLogin()">
      <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input type="email" class="form-control" id="email" [(ngModel)]="email" name="email" required>
      </div>

      <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <input type="password" class="form-control" id="password" [(ngModel)]="password" name="password" required>
      </div>

      <button type="submit" class="btn btn-primary w-100" [disabled]="isLoading">
        <span *ngIf="isLoading" class="spinner-border spinner-border-sm"></span>
        Login
      </button>
    </form>

    <p class="text-center mt-3">
      <button class="btn btn-link" (click)="continueAsGuest()">Continue as Guest</button>
    </p>

    <p class="text-danger text-center" *ngIf="errorMessage">{{ errorMessage }}</p>
  </div>
</div>
3️⃣ Update login.component.ts
Modify the logic to call the backend API for authentication:

typescript
Copy
Edit
import { Component } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  email: string = '';
  password: string = '';
  isLoading: boolean = false;
  errorMessage: string = '';

  constructor(private authService: AuthService, private router: Router) {}

  // Login Function
  onLogin() {
    this.isLoading = true;
    this.errorMessage = '';

    this.authService.login(this.email, this.password).subscribe({
      next: (response) => {
        this.isLoading = false;
        this.router.navigate(['/admin-dashboard']); // Redirect after login
      },
      error: (error) => {
        this.isLoading = false;
        this.errorMessage = 'Invalid credentials. Please try again.';
      }
    });
  }

  // Guest Login
  continueAsGuest() {
    this.authService.loginAsGuest();
    this.router.navigate(['/search-flights']); // Redirect to search flights page
  }
}
4️⃣ Create the AuthService for Authentication
Run:

sh
Copy
Edit
ng g s services/auth
Then, update auth.service.ts:

typescript
Copy
Edit
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = 'http://localhost:5000/api/auth/login'; // Adjust according to your backend

  constructor(private http: HttpClient, private router: Router) {}

  // 🔐 Login API Call
  login(email: string, password: string): Observable<any> {
    return this.http.post<any>(this.apiUrl, { email, password });
  }

  // ✅ Store Token (session-based)
  saveToken(token: string): void {
    sessionStorage.setItem('token', token);
  }

  // 🔍 Check if User is Logged In
  isLoggedIn(): boolean {
    return !!sessionStorage.getItem('token');
  }

  // 🚪 Logout
  logout(): void {
    sessionStorage.removeItem('token');
    this.router.navigate(['/login']);
  }

  // 🎭 Guest Login (Hardcoded)
  loginAsGuest(): void {
    sessionStorage.setItem('role', 'guest'); // Store role as guest
  }

  // 🔐 Check if Admin
  isAdmin(): boolean {
    return sessionStorage.getItem('role') === 'admin';
  }
}
5️⃣ Update app.module.ts
Ensure that FormsModule, HttpClientModule, and RouterModule are imported.

typescript
Copy
Edit
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { LoginComponent } from './components/login/login.component';

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
6️⃣ Add Routes in app-routing.module.ts
typescript
Copy
Edit
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './components/login/login.component';

const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: '', redirectTo: '/login', pathMatch: 'full' } // Redirect to login by default
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
7️⃣ Secure Admin Pages Using AuthGuard
Create a guard:

sh
Copy
Edit
ng g guard auth
Modify auth.guard.ts:

typescript
Copy
Edit
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): boolean {
    if (this.authService.isLoggedIn()) {
      return true;
    } else {
      this.router.navigate(['/login']);
      return false;
    }
  }
}
Then, protect admin routes in app-routing.module.ts:

typescript
Copy
Edit
import { AuthGuard } from './guards/auth.guard';

const routes: Routes = [
  { path: 'admin-dashboard', component: AdminDashboardComponent, canActivate: [AuthGuard] },
];
🛠 Testing the Login
✅ Start Backend:
Run your backend API first.

sh
Copy
Edit
dotnet run
✅ Start Frontend:
sh
Copy
Edit
ng serve
Now, try logging in using:

Valid admin credentials → Redirects to Admin Dashboard
Incorrect credentials → Shows error message
Clicking "Continue as Guest" → Redirects to Search Flights

