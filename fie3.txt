can you generate the checkin service database, repository, controller and process again
ChatGPT said:
Here is the implementation for the Check-in Service including the database model, DTOs, repository, and controller. This service will allow users to check in for their booked flights and receive a check-in ID and seat number.

1Ô∏è‚É£ Database Models (CheckIn.cs)
This model stores check-in details.

csharp
Copy
Edit
public class CheckIn
{
    public int Id { get; set; }
    public string CheckInId { get; set; } // Unique check-in ID
    public string ReferenceNumber { get; set; } // Booking reference
    public string SeatNumber { get; set; } // Assigned seat
    public DateTime CheckInTime { get; set; } // Timestamp of check-in
}
2Ô∏è‚É£ DTOs (CheckInRequestDTO.cs & CheckInResponseDTO.cs)
Check-in request DTO
csharp
Copy
Edit
public class CheckInRequestDTO
{
    public string ReferenceNumber { get; set; } // Booking reference number
}
Check-in response DTO
csharp
Copy
Edit
public class CheckInResponseDTO
{
    public string CheckInId { get; set; } 
    public string ReferenceNumber { get; set; } 
    public string SeatNumber { get; set; } 
    public DateTime CheckInTime { get; set; } 
}
3Ô∏è‚É£ Repository (ICheckInRepository.cs & CheckInRepository.cs)
Interface (ICheckInRepository.cs)
csharp
Copy
Edit
public interface ICheckInRepository
{
    Task<CheckInResponseDTO> CheckInAsync(CheckInRequestDTO request);
    Task<CheckInResponseDTO> GetCheckInDetailsAsync(string referenceNumber);
}
Repository Implementation (CheckInRepository.cs)
csharp
Copy
Edit
public class CheckInRepository : ICheckInRepository
{
    private readonly CheckInDbContext _context;
    private readonly BookingDbContext _bookingContext;

    public CheckInRepository(CheckInDbContext context, BookingDbContext bookingContext)
    {
        _context = context;
        _bookingContext = bookingContext;
    }

    public async Task<CheckInResponseDTO> CheckInAsync(CheckInRequestDTO request)
    {
        try
        {
            // Validate booking reference
            var booking = await _bookingContext.Bookings.FirstOrDefaultAsync(b => b.ReferenceNumber == request.ReferenceNumber);
            if (booking == null)
                throw new Exception("Booking not found.");

            if (booking.CheckedIn)
                throw new Exception("Passenger already checked in.");

            // Generate a unique Check-in ID
            string checkInId = "CHK" + new Random().Next(10000, 99999);

            // Generate a random seat number
            string seatNumber = "A" + new Random().Next(1, 30);

            // Create check-in record
            var checkIn = new CheckIn
            {
                CheckInId = checkInId,
                ReferenceNumber = request.ReferenceNumber,
                SeatNumber = seatNumber,
                CheckInTime = DateTime.UtcNow
            };

            _context.CheckIns.Add(checkIn);
            await _context.SaveChangesAsync();

            // Update booking status
            booking.CheckedIn = true;
            booking.CheckInId = checkInId;
            booking.SeatNumber = seatNumber;
            _bookingContext.Bookings.Update(booking);
            await _bookingContext.SaveChangesAsync();

            return new CheckInResponseDTO
            {
                CheckInId = checkInId,
                ReferenceNumber = request.ReferenceNumber,
                SeatNumber = seatNumber,
                CheckInTime = checkIn.CheckInTime
            };
        }
        catch (Exception ex)
        {
            throw new Exception("Error during check-in: " + ex.Message);
        }
    }

    public async Task<CheckInResponseDTO> GetCheckInDetailsAsync(string referenceNumber)
    {
        try
        {
            var checkIn = await _context.CheckIns.FirstOrDefaultAsync(c => c.ReferenceNumber == referenceNumber);
            if (checkIn == null)
                throw new Exception("Check-in details not found.");

            return new CheckInResponseDTO
            {
                CheckInId = checkIn.CheckInId,
                ReferenceNumber = checkIn.ReferenceNumber,
                SeatNumber = checkIn.SeatNumber,
                CheckInTime = checkIn.CheckInTime
            };
        }
        catch (Exception ex)
        {
            throw new Exception("Error retrieving check-in details: " + ex.Message);
        }
    }
}
4Ô∏è‚É£ Controller (CheckInController.cs)
csharp
Copy
Edit
[Route("api/[controller]")]
[ApiController]
public class CheckInController : ControllerBase
{
    private readonly ICheckInRepository _checkInRepository;

    public CheckInController(ICheckInRepository checkInRepository)
    {
        _checkInRepository = checkInRepository;
    }

    // CHECK-IN REQUEST
    [HttpPost("check-in")]
    public async Task<IActionResult> CheckIn([FromBody] CheckInRequestDTO request)
    {
        try
        {
            var response = await _checkInRepository.CheckInAsync(request);
            return Ok(response);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { Error = ex.Message });
        }
    }

    // GET CHECK-IN DETAILS BY REFERENCE NUMBER
    [HttpGet("{referenceNumber}")]
    public async Task<IActionResult> GetCheckInDetails(string referenceNumber)
    {
        try
        {
            var checkInDetails = await _checkInRepository.GetCheckInDetailsAsync(referenceNumber);
            return Ok(checkInDetails);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { Error = ex.Message });
        }
    }
}
5Ô∏è‚É£ Database Context (CheckInDbContext.cs)
csharp
Copy
Edit
public class CheckInDbContext : DbContext
{
    public CheckInDbContext(DbContextOptions<CheckInDbContext> options) : base(options) { }

    public DbSet<CheckIn> CheckIns { get; set; }
}
6Ô∏è‚É£ API Endpoints
‚úÖ Check-in for a flight
bash
Copy
Edit
POST http://localhost:5005/api/checkin/check-in
Content-Type: application/json

{
  "ReferenceNumber": "AB20251234"
}
‚úÖ Get check-in details
bash
Copy
Edit
GET http://localhost:5005/api/checkin/AB20251234
7Ô∏è‚É£ Configuration (appsettings.json)
json
Copy
Edit
"ConnectionStrings": {
  "CheckInDB": "Server=(local)\\sqlexpress;Database=CheckInDB;Trusted_Connection=True;"
}
Summary of the Process
Passenger books a flight via BookingService, receiving a ReferenceNumber.
Passenger requests check-in via CheckInService, passing their ReferenceNumber.
System validates booking and checks if already checked-in.
Generates a unique Check-in ID & Seat Number.
Stores check-in details in the database and updates the booking.
Passenger retrieves check-in details with ReferenceNumber.
This completes the Check-in Service with all necessary components. Let me know if you need modifications or further enhancements! üöÄ

You said:
Generate code for creating database and table for this check-in service
ChatGPT said:
Here is the SQL script to create the database and table for the Check-in Service in SQL Server.

1Ô∏è‚É£ Create Database
sql
Copy
Edit
CREATE DATABASE CheckInDB;
GO
2Ô∏è‚É£ Use the Database
sql
Copy
Edit
USE CheckInDB;
GO
3Ô∏è‚É£ Create Table for Check-in Details
sql
Copy
Edit
CREATE TABLE CheckIns (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    CheckInId NVARCHAR(20) UNIQUE NOT NULL, -- Unique Check-in ID
    ReferenceNumber NVARCHAR(20) NOT NULL,  -- Booking Reference Number
    SeatNumber NVARCHAR(5) NOT NULL,        -- Assigned Seat Number
    CheckInTime DATETIME DEFAULT GETDATE()  -- Timestamp of Check-in
);
GO
4Ô∏è‚É£ Create Indexes for Faster Lookup
sql
Copy
Edit
CREATE INDEX IX_CheckIns_ReferenceNumber ON CheckIns(ReferenceNumber);
5Ô∏è‚É£ Sample Insert Statement
You can insert sample check-in data using:

sql
Copy
Edit
INSERT INTO CheckIns (CheckInId, ReferenceNumber, SeatNumber, CheckInTime)
VALUES ('CHK12345', 'AB20251234', 'A12', GETDATE());
6Ô∏è‚É£ Retrieve Check-in Details
sql
Copy
Edit
SELECT * FROM CheckIns WHERE ReferenceNumber = 'AB20251234';
7Ô∏è‚É£ Delete Check-in Data (If Needed)
sql
Copy
Edit
DELETE FROM CheckIns WHERE ReferenceNumber = 'AB20251234';




CheckInRepository.cs
csharp
Copy
Edit
public class CheckInRepository : ICheckInRepository
{
    private readonly CheckInDbContext _context;

    public CheckInRepository(CheckInDbContext context)
    {
        _context = context;
    }

    public async Task<CheckInResponseDTO> CheckInPassengerAsync(CheckInRequestDTO request)
    {
        var seatNumber = GenerateSeatNumber();
        var checkIn = new CheckIn
        {
            ReferenceNumber = request.ReferenceNumber,
            PassengerName = request.PassengerName,
            SeatNumber = seatNumber
        };

        _context.CheckIns.Add(checkIn);
        await _context.SaveChangesAsync();

        return new CheckInResponseDTO
        {
            CheckInId = checkIn.CheckInId,
            ReferenceNumber = checkIn.ReferenceNumber,
            PassengerName = checkIn.PassengerName,
            SeatNumber = checkIn.SeatNumber,
            CheckInTime = checkIn.CheckInTime
        };
    }

    public async Task<CheckInResponseDTO> GetCheckInDetailsAsync(string checkInId)
    {
        var checkIn = await _context.CheckIns.FirstOrDefaultAsync(c => c.CheckInId == checkInId);
        if (checkIn == null) throw new Exception("Check-in not found.");

        return new CheckInResponseDTO
        {
            CheckInId = checkIn.CheckInId,
            ReferenceNumber = checkIn.ReferenceNumber,
            PassengerName = checkIn.PassengerName,
            SeatNumber = checkIn.SeatNumber,
            CheckInTime = checkIn.CheckInTime
        };
    }

    private string GenerateSeatNumber()
    {
        Random random = new Random();
        int seat = random.Next(1, 30);
        char row = (char)('A' + random.Next(0, 6)); // A-F rows
        return $"{row}{seat}";
    }
}
3Ô∏è‚É£ Process Layer (Handles Booking API Communication)
ICheckInProcess.cs
csharp
Copy
Edit
public interface ICheckInProcess
{
    Task<CheckInResponseDTO> ProcessCheckInAsync(CheckInRequestDTO request);
}
CheckInProcess.cs
csharp
Copy
Edit
public class CheckInProcess : ICheckInProcess
{
    private readonly HttpClient _httpClient;
    private readonly IConfiguration _configuration;
    private readonly ICheckInRepository _checkInRepository;

    public CheckInProcess(HttpClient httpClient, IConfiguration configuration, ICheckInRepository checkInRepository)
    {
        _httpClient = httpClient;
        _configuration = configuration;
        _checkInRepository = checkInRepository;
    }

    public async Task<CheckInResponseDTO> ProcessCheckInAsync(CheckInRequestDTO request)
    {
        string bookingServiceUrl = _configuration["ServiceUrls:BookingService"];

        // Verify booking reference from Booking Service
        var bookingResponse = await _httpClient.GetAsync($"{bookingServiceUrl}/api/booking/{request.ReferenceNumber}");
        if (!bookingResponse.IsSuccessStatusCode)
        {
            throw new Exception("Invalid booking reference.");
        }

        return await _checkInRepository.CheckInPassengerAsync(request);
    }
}
4Ô∏è‚É£ Controller (CheckInController.cs)
csharp
Copy
Edit
[Route("api/[controller]")]
[ApiController]
public class CheckInController : ControllerBase
{
    private readonly ICheckInProcess _checkInProcess;

    public CheckInController(ICheckInProcess checkInProcess)
    {
        _checkInProcess = checkInProcess;
    }

    // CHECK-IN A PASSENGER
    [HttpPost("checkin")]
    public async Task<IActionResult> CheckInPassenger([FromBody] CheckInRequestDTO request)
    {
        try
        {
            var response = await _checkInProcess.ProcessCheckInAsync(request);
            return Ok(response);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { Error = ex.Message });
        }
    }

    // GET CHECK-IN DETAILS
    [HttpGet("{checkInId}")]
    public async Task<IActionResult> GetCheckInDetails(string checkInId)
    {
        try
        {
            var response = await _checkInProcess.GetCheckInDetailsAsync(checkInId);
            return Ok(response);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { Error = ex.Message });
        }
    }
}
5Ô∏è‚É£ Program.cs
csharp
Copy
Edit
var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddDbContext<CheckInDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("CheckInDB")));

builder.Services.AddHttpClient();
builder.Services.AddScoped<ICheckInRepository, CheckInRepository>();
builder.Services.AddScoped<ICheckInProcess, CheckInProcess>();
builder.Services.AddControllers();

var app = builder.Build();

// Configure the HTTP request pipeline
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

app.UseRouting();
app.UseAuthorization();
app.MapControllers();

app.Run();
6Ô∏è‚É£ Configuration (appsettings.json)
json
Copy
Edit
"ConnectionStrings": {
  "CheckInDB": "Server=(local)\\sqlexpress;Database=CheckInDB;Trusted_Connection=True;TrustServerCertificate=True;"
},
"ServiceUrls": {
  "BookingService": "http://localhost:5001"
}
üöÄ Summary
Check-in Service is independent of Booking Service but verifies the reference before check-in.
Process layer handles API communication with Booking Service.
Repository handles database transactions.
Seat assignment is automated.
CheckInController exposes APIs for check-in and retrieval.





For a booking there can be many passengers And they all have same reference number how I can assign then unique seatas and then update in booking service passengers table
ChatGPT said:
Since a booking can have multiple passengers, each passenger should get a unique seat number, and the Booking Service's passengers table must be updated with the assigned seat numbers.

Here‚Äôs how we can achieve this in the Check-in Service:

Steps to Implement:
Check if the booking reference exists ‚Üí Validate with the Booking Service.
Fetch all passengers associated with the booking ‚Üí Get them from the Booking Service.
Assign unique seat numbers ‚Üí Ensure no duplicates.
Save check-in details in the Check-in Service ‚Üí Store it in the local database.
Update the Booking Service with seat assignments ‚Üí Send an API request to update passenger details.
1Ô∏è‚É£ Update Repository to Assign Seats for All Passengers
ICheckInRepository.cs
csharp
Copy
Edit
public interface ICheckInRepository
{
    Task<List<CheckInResponseDTO>> CheckInPassengersAsync(string referenceNumber, List<string> passengerNames);
    Task<CheckInResponseDTO> GetCheckInDetailsAsync(string checkInId);
}
CheckInRepository.cs
csharp
Copy
Edit
public class CheckInRepository : ICheckInRepository
{
    private readonly CheckInDbContext _context;

    public CheckInRepository(CheckInDbContext context)
    {
        _context = context;
    }

    public async Task<List<CheckInResponseDTO>> CheckInPassengersAsync(string referenceNumber, List<string> passengerNames)
    {
        var seatNumbers = GenerateUniqueSeatNumbers(passengerNames.Count);
        var checkIns = new List<CheckIn>();

        for (int i = 0; i < passengerNames.Count; i++)
        {
            var checkIn = new CheckIn
            {
                ReferenceNumber = referenceNumber,
                PassengerName = passengerNames[i],
                SeatNumber = seatNumbers[i]
            };

            checkIns.Add(checkIn);
        }

        await _context.CheckIns.AddRangeAsync(checkIns);
        await _context.SaveChangesAsync();

        return checkIns.Select(c => new CheckInResponseDTO
        {
            CheckInId = c.CheckInId,
            ReferenceNumber = c.ReferenceNumber,
            PassengerName = c.PassengerName,
            SeatNumber = c.SeatNumber,
            CheckInTime = c.CheckInTime
        }).ToList();
    }

    public async Task<CheckInResponseDTO> GetCheckInDetailsAsync(string checkInId)
    {
        var checkIn = await _context.CheckIns.FirstOrDefaultAsync(c => c.CheckInId == checkInId);
        if (checkIn == null) throw new Exception("Check-in not found.");

        return new CheckInResponseDTO
        {
            CheckInId = checkIn.CheckInId,
            ReferenceNumber = checkIn.ReferenceNumber,
            PassengerName = checkIn.PassengerName,
            SeatNumber = checkIn.SeatNumber,
            CheckInTime = checkIn.CheckInTime
        };
    }

    private List<string> GenerateUniqueSeatNumbers(int count)
    {
        HashSet<string> seatNumbers = new HashSet<string>();
        Random random = new Random();

        while (seatNumbers.Count < count)
        {
            int seat = random.Next(1, 30);
            char row = (char)('A' + random.Next(0, 6));
            seatNumbers.Add($"{row}{seat}");
        }

        return seatNumbers.ToList();
    }
}
2Ô∏è‚É£ Process Layer (Handles Booking API Communication)
ICheckInProcess.cs
csharp
Copy
Edit
public interface ICheckInProcess
{
    Task<List<CheckInResponseDTO>> ProcessCheckInAsync(string referenceNumber);
}
CheckInProcess.cs
csharp
Copy
Edit
public class CheckInProcess : ICheckInProcess
{
    private readonly HttpClient _httpClient;
    private readonly IConfiguration _configuration;
    private readonly ICheckInRepository _checkInRepository;

    public CheckInProcess(HttpClient httpClient, IConfiguration configuration, ICheckInRepository checkInRepository)
    {
        _httpClient = httpClient;
        _configuration = configuration;
        _checkInRepository = checkInRepository;
    }

    public async Task<List<CheckInResponseDTO>> ProcessCheckInAsync(string referenceNumber)
    {
        string bookingServiceUrl = _configuration["ServiceUrls:BookingService"];

        // Step 1: Verify if booking exists
        var bookingResponse = await _httpClient.GetAsync($"{bookingServiceUrl}/api/booking/{referenceNumber}");
        if (!bookingResponse.IsSuccessStatusCode)
        {
            throw new Exception("Invalid booking reference.");
        }

        var bookingDetails = await bookingResponse.Content.ReadFromJsonAsync<BookingDTO>();
        if (bookingDetails == null || bookingDetails.Passengers.Count == 0)
        {
            throw new Exception("No passengers found for this booking.");
        }

        // Step 2: Check-in all passengers
        var checkInResponses = await _checkInRepository.CheckInPassengersAsync(referenceNumber, bookingDetails.Passengers);

        // Step 3: Update Booking Service with seat numbers
        var updateRequest = new UpdateBookingSeatsDTO
        {
            ReferenceNumber = referenceNumber,
            SeatAssignments = checkInResponses.Select(c => new PassengerSeatDTO
            {
                PassengerName = c.PassengerName,
                SeatNumber = c.SeatNumber
            }).ToList()
        };

        var updateResponse = await _httpClient.PutAsJsonAsync($"{bookingServiceUrl}/api/booking/update-seats", updateRequest);
        if (!updateResponse.IsSuccessStatusCode)
        {
            throw new Exception("Failed to update booking service with seat assignments.");
        }

        return checkInResponses;
    }
}
3Ô∏è‚É£ Controller
csharp
Copy
Edit
[Route("api/[controller]")]
[ApiController]
public class CheckInController : ControllerBase
{
    private readonly ICheckInProcess _checkInProcess;

    public CheckInController(ICheckInProcess checkInProcess)
    {
        _checkInProcess = checkInProcess;
    }

    // CHECK-IN ALL PASSENGERS FOR A BOOKING
    [HttpPost("checkin/{referenceNumber}")]
    public async Task<IActionResult> CheckInPassengers(string referenceNumber)
    {
        try
        {
            var response = await _checkInProcess.ProcessCheckInAsync(referenceNumber);
            return Ok(response);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { Error = ex.Message });
        }
    }

    // GET CHECK-IN DETAILS
    [HttpGet("{checkInId}")]
    public async Task<IActionResult> GetCheckInDetails(string checkInId)
    {
        try
        {
            var response = await _checkInProcess.GetCheckInDetailsAsync(checkInId);
            return Ok(response);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { Error = ex.Message });
        }
    }
}
4Ô∏è‚É£ DTOs for Booking Service Communication
BookingDTO.cs (Incoming Data)
csharp
Copy
Edit
public class BookingDTO
{
    public string ReferenceNumber { get; set; }
    public List<string> Passengers { get; set; }
}
UpdateBookingSeatsDTO.cs (Outgoing Data)
csharp
Copy
Edit
public class UpdateBookingSeatsDTO
{
    public string ReferenceNumber { get; set; }
    public List<PassengerSeatDTO> SeatAssignments { get; set; }
}

public class PassengerSeatDTO
{
    public string PassengerName { get; set; }
    public string SeatNumber { get; set; }
}
5Ô∏è‚É£ Program.cs
csharp
Copy
Edit
var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddDbContext<CheckInDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("CheckInDB")));

builder.Services.AddHttpClient();
builder.Services.AddScoped<ICheckInRepository, CheckInRepository>();
builder.Services.AddScoped<ICheckInProcess, CheckInProcess>();
builder.Services.AddControllers();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

app.UseRouting();
app.UseAuthorization();
app.MapControllers();
app.Run();
6Ô∏è‚É£ Booking Service API Update Endpoint
BookingController.cs
csharp
Copy
Edit
[HttpPut("update-seats")]
public async Task<IActionResult> UpdateSeats([FromBody] UpdateBookingSeatsDTO request)
{
    foreach (var seat in request.SeatAssignments)
    {
        var passenger = await _context.Passengers.FirstOrDefaultAsync(p => p.ReferenceNumber == request.ReferenceNumber && p.Name == seat.PassengerName);
        if (passenger != null)
        {
            passenger.SeatNumber = seat.SeatNumber;
        }
    }

    await _context.SaveChangesAsync();
    return Ok("Seats updated successfully.");
}
üöÄ Final Workflow
‚úî Check-in Service fetches passengers from Booking Service
‚úî Assigns unique seats to each passenger
‚úî Stores check-in details in Check-in DB
‚úî Updates Booking Service with assigned seats
